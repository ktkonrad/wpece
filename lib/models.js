// Generated by CoffeeScript 1.3.3
(function() {
  var Sequelize, bcrypt, config, sequelize;

  config = require("./config");

  Sequelize = require("sequelize");

  bcrypt = require("bcrypt");

  sequelize = new Sequelize(config.mysql.database, config.mysql.user, config.mysql.password);

  module.exports = {
    'sequelize': sequelize,
    User: sequelize.define('User', {
      email: {
        type: Sequelize.STRING,
        validate: {
          isEmail: true
        }
      },
      name: Sequelize.STRING,
      facebookId: Sequelize.INTEGER,
      salt: Sequelize.STRING,
      password: Sequelize.STRING
    }, {
      instanceMethods: {
        setPassword: function(password) {
          var savePassword,
            _this = this;
          savePassword = function(password, salt) {
            return bcrypt.hash(password, salt, function(err, hashed) {
              if (err) {
                return console.log(err);
              }
              _this.password = hashed;
              return _this.save();
            });
          };
          if (this.salt) {
            return savePassword(password, this.salt);
          } else {
            return bcrypt.genSalt(function(err, salt) {
              if (err) {
                return console.log(err);
              }
              _this.salt = salt;
              return savePassword(password, _this.salt);
            });
          }
        },
        verifyPassword: function(password, res) {
          var _this = this;
          return bcrypt.hash(password, this.salt, function(err, hashed) {
            if (err) {
              console.log(err);
            }
            if (_this.password && hashed === _this.password) {
              return res.send('success');
            } else {
              return res.send('failed', 401);
            }
          });
        }
      },
      classMethods: {
        findOrCreateFacebook: function(session, accessToken, accessTokExtra, fbUserMetadata, promise) {
          var _this = this;
          console.log(fbUserMetadata);
          return this.find({
            where: {
              facebookId: fbUserMetadata.id
            }
          }).success(function(user) {
            if (user) {
              return promise.fulfill(user);
            } else {
              return _this.create({
                name: fbUserMetadata.name,
                email: fbUserMetadata.email,
                facebookId: fbUserMetadata.id
              }).success(function(user) {
                return promise.fulfill(user);
              }).fail(function(err) {
                console.log(err);
                return promise.fail(err);
              });
            }
          }).fail(function(err) {
            console.log(err);
            return promise.fail(err);
          });
        }
      }
    })
  };

}).call(this);
