// Generated by CoffeeScript 1.3.3
(function() {
  var Schema, User, UserSchema, bcrypt, config, findOrCreateWith, mongoose, validate_email,
    _this = this;

  config = require("./config");

  mongoose = require("mongoose");

  bcrypt = require("bcrypt");

  mongoose.connect("mongodb://" + config.mongo.host + "/" + config.mongo.database, function(err) {
    if (err) {
      return console.log(err);
    }
  });

  validate_email = function(val) {
    return !val || /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i.test(val);
  };

  findOrCreateWith = function(model, source) {
    return function(session, accessToken, accessTokExtra, userMetadata, promise) {
      var condition,
        _this = this;
      console.log(userMetadata);
      condition = {};
      condition["" + source + "Id"] = userMetadata.id;
      return model.findOne(condition, function(err, user) {
        if (err) {
          console.log(err);
          return promise.fail(err);
        }
        if (user) {
          return promise.fulfill(user);
        } else {
          user = new model();
          user["" + source + "Id"] = userMetadata.id;
          user.name = userMetadata.name;
          user.email = userMetadata.email;
          return user.save(function(err) {
            if (err) {
              console.log(err);
              return promise.fail(err);
            }
            return promise.fulfill(user);
          });
        }
      });
    };
  };

  Schema = mongoose.Schema;

  UserSchema = new Schema({
    email: {
      type: String,
      validate: [validate_email, 'email']
    },
    name: String,
    facebookId: String,
    googleId: String,
    salt: String,
    password: String
  });

  User = mongoose.model('User', UserSchema);

  UserSchema.methods.setPassword = function(password) {
    var savePassword,
      _this = this;
    savePassword = function(password, salt) {
      return bcrypt.hash(password, salt, function(err, hashed) {
        if (err) {
          return console.log(err);
        }
        _this.password = hashed;
        return _this.save();
      });
    };
    if (this.salt) {
      return savePassword(password, this.salt);
    } else {
      return bcrypt.genSalt(function(err, salt) {
        if (err) {
          return console.log(err);
        }
        _this.salt = salt;
        return savePassword(password, _this.salt);
      });
    }
  };

  UserSchema.methods.verifyPassword = function(password, res) {
    var _this = this;
    return bcrypt.hash(password, this.salt, function(err, hashed) {
      if (err) {
        console.log(err);
      }
      if (_this.password && hashed === _this.password) {
        return res.send('success');
      } else {
        return res.send('failed', 401);
      }
    });
  };

  UserSchema.statics.findOrCreateFacebook = findOrCreateWith(User, 'facebook');

  UserSchema.statics.findOrCreateGoogle = findOrCreateWith(User, 'google');

  module.exports = {
    User: User
  };

}).call(this);
