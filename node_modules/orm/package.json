{
  "name": "orm",
  "version": "0.1.8-10",
  "description": "NodeJS Object-relational mapping",
  "keywords": [
    "orm",
    "mysql",
    "postgresql",
    "mongodb",
    "database",
    "relational"
  ],
  "author": {
    "name": "Diogo Resende",
    "email": "dresende@thinkdigital.pt"
  },
  "contributors": [
    {
      "name": "Michael Axiak",
      "email": "mike@axiak.net"
    },
    {
      "name": "Michael Yagudaev",
      "email": "michael@yagudaev.com"
    },
    {
      "name": "booo"
    },
    {
      "name": "shaneiseminger"
    },
    {
      "name": "shine-on"
    }
  ],
  "engines": {
    "node": ">= 0.4.0"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/dresende/node-orm.git"
  },
  "directories": {
    "lib": "./lib",
    "example": "./examples"
  },
  "main": "./lib/orm",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/dresende/node-orm/raw/master/LICENSE"
    }
  ],
  "readme": "NodeJS ORM\n==========\n\n## About\n\nNode-ORM is a NodeJS module for multiple databases using Object-Relational Mapping with\nsome cool features like validators and hooks. New features are added by suggestion issues\nor when I remember I need something. I make a strong effort not to change the API, but\nsometimes it can happen. If you don't want to get into trouble I suggest you to define\nyour package.json (in project) to use a specific version of ORM (and not >= x.y.z).\n\n## Installing\n\nInstall using NPM:\n\n    npm install orm\n\n## Connecting to a Database (MySQL in the example)\n\nYou can check the [API](https://github.com/dresende/node-orm/wiki) for a more detailed overview.\n\n    var orm = require(\"orm\");\n    var db = orm.connect(\"mysql://username:password@hostname/database\", function (success, db) {\n        if (!success) {\n            console.log(\"Could not connect to database!\");\n            return;\n        }\n        \n        // you can now use db variable to define models\n    });\n\n## Connecting via raw database API\n\n    var orm = require(\"orm\");\n    var mysql = require(\"mysql\");\n    var client = mysql.createClient({\n        user: 'root',\n        password: 'root'\n    });\n    var db = orm.connect(\"mysql\", client, function (success, db) {\n        // same as above...\n    });\n\nThis allows you to generate your own database objects that conform to the following postgres and mysql libraries:\n\n * Mysql: https://github.com/felixge/node-mysql\n * Postgres: https://github.com/brianc/node-postgres\n\n## Defining a model\n\n    var Person = db.define(\"person\", {\n        \"name\"   : { \"type\": \"string\" },\n        \"surname\": { \"type\": \"string\", \"default\": \"\" },\n        \"age\"    : { \"type\": \"int\" }\n\t}, {\n        \"methods\" : {\n            \"fullName\" :function () {\n                return this.name + \" \" + this.surname;\n            }\n        }\n    });\n\n## Adding associations\n\n    Person.hasOne(\"father\", Person);\n    // or just\n    Person.hasOne(\"mother\"); // defaults to same model\n    \n    Person.hasMany(\"friends\", Person, \"friend\"); // will create a table \"person_friends\" with 2 fields (person_id and friend_id)\n\n## Creating the model on the database\n\n    Person.sync();\n\n## Creating and using a record\n\n    var John = new Person({\n    \t\"name\"\t\t: \"John\",\n    \t\"surname\"\t: \"Doe\",\n    \t\"age\"\t\t: 20\n    });\n    console.log(\"Hello, my name is \" + John.fullName() + \" and I'm \" + John.age + \" years old\");\n\n## Saving record to database\n\n    John.save(function (err, JohnCopy) {\n    \tif (!err) {\n    \t\tconsole.log(\"Saved! ID=\" + John.id); // you can use John or JohnCopy\n    \t} else {\n    \t\tconsole.log(\"Something went wrong...\");\n    \t\tconsole.dir(err);\n    \t}\n    });\n\n## Changing associations\n\nI think an example is better to explain.\n\n    John.setFather(Jeremy, function () {\n    \tJohn.setMother(Jane, function () {\n    \t\tJohn.addFriends(Jeremy, Jane, function () {\n    \t\t\tconsole.log(\"Jeremy and Jane (John's parents) are now his friends too\");\n    \t\t});\n    \t});\n    });\n    \nIf you want there's also this methods:\n\n    John.getFather(function (JohnFather) {\n    \tconsole.log(\"John's father is \" + JohnFather.name);\n    });\n    John.unsetMother(function () {\n    \tconsole.log(\"John has no mother now!\");\n    });\n    John.removeFriends(Jeremy, Jane, function () {\n    \tconsole.log(\"John has no friends now!\");\n    });\n    // or just don't send any, all will be removed\n    John.removeFriends(function () {\n    \tconsole.log(\"John has no friends now!\");\n    });\n\n## Database Support\n\nCurrently this module supports the following database types:\n\n1. MySQL\n2. PostgreSQL\n3. MongoDB (alpha)\n\n## Supported Types\n\nThis values are still just supported for .sync() (table creations), not for other instance operations like .save() (yet).\n\n<table>\n\t<tr>\n\t\t<th>Name</th>\n\t\t<th>Description</th>\n\t\t<th>MySQL Type</th>\n        <th>PostgreSQL Type</th>\n        <th>MongoDB Type</th>\n\t</tr>\n\t<tr>\n\t\t<td>string</td>\n\t\t<td>Small text</td>\n\t\t<td>VARCHAR(255)</td>\n        <td>VARCHAR(255)</td>\n        <td>String</td>\n\t</tr>\n\t<tr>\n\t\t<td>text</td>\n\t\t<td>Big text</td>\n\t\t<td>TEXT</td>\n        <td>TEXT</td>\n        <td>String</td>\n\t</tr>\n\t<tr>\n\t\t<td>int, integer, num, number</td>\n\t\t<td>Signed integer</td>\n\t\t<td>INT</td>\n        <td>INTEGER</td>\n        <td>Int</td>\n\t</tr>\n\t<tr>\n\t\t<td>float</td>\n\t\t<td>Floating point number</td>\n\t\t<td>FLOAT</td>\n        <td>REAL</td>\n        <td>Float</td>\n\t</tr>\n\t<tr>\n\t\t<td>bool, boolean</td>\n\t\t<td>True or false value</td>\n\t\t<td>TINYINT(1) (true=1, false=0)</td>\n        <td>BOOLEAN</td>\n        <td>Boolean</td>\n\t</tr>\n\t<tr>\n\t\t<td>date</td>\n\t\t<td>Date/time value (seconds precision)</td>\n\t\t<td>DATETIME</td>\n        <td>TIMESTAMP</td>\n        <td>?</td>\n\t</tr>\n\t<tr>\n\t\t<td>data</td>\n\t\t<td>Binary data</td>\n\t\t<td>BLOB</td>\n        <td>BYTEA</td>\n        <td>String</td>\n\t</tr>\n\t<tr>\n\t\t<td>enum</td>\n\t\t<td>Enumerated value</td>\n\t\t<td>ENUM</td>\n        <td>ENUM</td>\n        <td>String</td>\n\t</tr>\n\t<tr>\n\t\t<td>struct, object</td>\n\t\t<td>Generic (and simple) object</td>\n\t\t<td>TEXT (saved as JSON)</td>\n        <td>TEXT (saved as JSON)</td>\n        <td>Object</td>\n\t</tr>\n</table>\n",
  "_id": "orm@0.1.8-10",
  "dist": {
    "shasum": "6765d2f6209c14d20bdf24fff86b5bd233045173"
  },
  "_from": "orm"
}
